#!/usr/bin/env ruby
#

require_relative 'solver'

puts '---- Multicrew EVA - part 1 ---------'
max_rounds = 11 # bad launch
state = State.new(electricity: 6, crew: 2)
transformations = [
  Transformation.new(inputs: {}, outputs: { electricity: 1 }),

  Transformation.new(inputs: { electricity: 1 }, outputs: { coms: 3 }), # ground control connection
  Transformation.new(inputs: { nav: 1, data: 2 }, outputs: { coms: 5 }),
  Transformation.new(inputs: { nav: 3 }, outputs: { coms: 6 }),

  Transformation.new(inputs: { electricity: 1 }, outputs: { nav: 2 }),
  Transformation.new(inputs: { data: 1 }, outputs: { nav: 2, coms: 1 }),
  Transformation.new(inputs: { electricity: 1, coms: 1 }, outputs: { nav: 4 }),

  Transformation.new(inputs: { crew: 1 }, outputs: { data: 2 }),
  Transformation.new(inputs: { crew: 1, coms: 1 }, outputs: { nav: 4 }),
  Transformation.new(inputs: { electricity: 1, crew: 1 }, outputs: { data: 2, nav: 2 }),
]
objective = { nav: 20, coms: 10 }

solver = OptimalSolver.new(transformations, objective, max_rounds, state, with_crew: 2)
solution = solver.run
raise 'Could not find any solution' unless solution

solution.each_with_index do |t, i|
  puts "#{i + 1}: #{t}"
end
puts "Using #{solution.size} rounds out of #{max_rounds}"

puts '---- Multicrew EVA - part 2 ---------'
max_rounds = 12
state = State.new(electricity: 6, nav: 1, crew: 2)
transformations = [
  Transformation.new(inputs: {}, outputs: { electricity: 1 }),

  Transformation.new(inputs: { electricity: 1 }, outputs: { coms: 3, angle: 1 }),
  Transformation.new(inputs: { nav: 1, data: 2 }, outputs: { coms: 5, angle: 1 }),
  Transformation.new(inputs: { nav: 3 }, outputs: { coms: 6, angle: 1 }),

  Transformation.new(inputs: { electricity: 1 }, outputs: { nav: 3 }),
  Transformation.new(inputs: { nav: 2, angle: 2 }, outputs: { data: 3 }),
  Transformation.new(inputs: { coms: 3 }, outputs: { data: 3, nav: 2 }),

  Transformation.new(inputs: { crew: 1, angle: 1 }, outputs: { data: 2 }),
  Transformation.new(inputs: { crew: 1, coms: 1 }, outputs: { nav: 4 }),
  Transformation.new(inputs: { electricity: 1, crew: 1 }, outputs: { data: 2, nav: 2 }),
]
objective = { coms: 12, data: 12, angle: (-2..2) }

solver = OptimalSolver.new(transformations, objective, max_rounds, state, with_crew: 2)
solution = solver.run
raise 'Could not find any solution' unless solution

solution.each_with_index do |t, i|
  puts "#{i + 1}: #{t}"
end
puts "Using #{solution.size} rounds out of #{max_rounds}"
